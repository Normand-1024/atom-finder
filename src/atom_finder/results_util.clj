(ns atom-finder.results-util
  (:require [atom-finder.util :refer :all]
            [clojure.string :as str]
            [schema.core :as s]
            )
  (:use     [clojure.pprint :only [pprint print-table]])
  (:import [org.eclipse.cdt.core.dom.ast IASTNode IASTUnaryExpression]))

; Utilities for processing the edn output of print-atoms-in-dir

(defn read-data
  "Read edn files living in data/"
  [filename]
  (->> (str "data/" filename)
       ClassLoader/getSystemResource
       clojure.java.io/file
       slurp
       read-string))

; TODO: delete this once log files are generated with hashes
; instead of arrays
(defn read-patch-data
  "Parse files generated by log-atoms-changed-all-commits"
  [filename]
  (->> filename
       read-data
       (map (fn [[r, a, b]] (array-map :revstr r :atom-counts a :bug-ids b)))
       ))

(defn dedupe-preprocessors
  [results]
  "Only count 1 preprocessor statement per line"
  (for [result results]
    (update-in result [1 :preprocessor-in-statement] distinct)))

(defn sum-found-atoms
  "Generate a total count of each of the atoms in the result edn"
  [results]
  (->> results
       (map last)
       (map (partial map-values count))
       (reduce (partial merge-with +))
       ))

(defn found-atom-source
  "Return the source code for an atom found in a file"
  [atom-name results]
  (->> results
       (filter #(not-empty (atom-name (last %))))
       (map (fn [[filename hash]]
              [filename
              (map #(vector %1 (nth (slurp-lines (expand-home filename)) (dec %1)))
                   (atom-name hash))]))

       pprint))
